generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para conversaciones
model Conversation {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  participants Participant[]
  messages     Message[]
}

model Participant {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@index([senderId])
}

// Modelo para vistas de propiedades
model PropertyView {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([propertyId])
  @@index([userId])
}

// Actualiza el modelo User para incluir relaciones con mensajes
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  hashedPassword String
  salt           String
  resetToken     String?
  resetTokenExpiresAt DateTime?
  sessions       Session[]
  roles          Role[]
  sentMessages     Message[]      @relation()
  conversations    Participant[]
  propertyViews    PropertyView[]
  subscriptionTier String?        // "basic", "pro", "business"
  subscriptionEnd  DateTime?
  reviews       Review[]
  favorites   Favorite[]
  notifications Notification[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

// Actualiza el modelo Property para incluir campos adicionales
model Property {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  location    String
  price       Int
  bedrooms    Int
  bathrooms   Int
  squareFeet  Int
  amenities   String[]
  images      String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  views             PropertyView[]
  reservationsCount Int           @default(0)
  viewsCount        Int           @default(0)
  blockedDates      DateTime[]    @default([])
  rating        Float       @default(0)
  reviewsCount  Int         @default(0)
  reviews       Review[]
  favorites   Favorite[]

  @@index([userId])
}

// Actualiza el modelo Reservation para incluir campos de pago
model Reservation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  isPaid          Boolean  @default(false)
  paymentIntentId String?
  paymentStatus   String?  // "PENDING", "COMPLETED", "FAILED"
  review        Review?

  @@index([propertyId])
  @@index([userId])
}

// AÃ±adir al schema.prisma existente

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String
  propertyId    String
  property      Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([propertyId])
  @@index([userId])
  @@index([reservationId])
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@index([userId])
}

